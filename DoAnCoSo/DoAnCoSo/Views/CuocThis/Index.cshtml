 @model IEnumerable<DoAnCoSo.Models.tbCuocThi>

@{
    ApplicationDbContext context = new ApplicationDbContext();
    string LayTenLoaiTruong(int? loaiTruongId)
    {
        var tenLoaiTruong = context.tbLoaiTruong.FirstOrDefault(p => p.Id == loaiTruongId);
        if (tenLoaiTruong == null)
            return "";
        return tenLoaiTruong.TenLoaiTruong;
    }
}

 <style>
    .school-list {
        font-family: Arial, sans-serif;
        background-color: #f2f2f2;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }

        .school-list h1 {
            color: black;
            margin-bottom: 20px;
        }

    .add-sort {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0px 3px;
    }
        .school-list a.add-button {
            background-color: #007bff;
            color: #fff;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 5px;
        }

            .school-list a.add-button:hover {
                background-color: #0056b3;
            }

        .school-list table {
            width: 100%;
            margin-top: 20px;
            background-color: #fff;
            border-collapse: collapse;
        }

            .school-list table th {
                background-color: #007bff;
                color: #fff;
                padding: 10px;
                text-align: left;
            }

            .school-list table td {
                padding: 10px;
                border-bottom: 1px solid #ddd;
            }

                .school-list table td a.edit-link {
                    background-color: #007bff;
                    color: #fff;
                    padding: 5px 10px;
                    text-decoration: none;
                    border-radius: 5px;
                }

                    .school-list table td a.edit-link.btn-danger {
                        color: #fff;
                        background-color: #dc3545;
                    }

                    .school-list table td a.edit-link:hover {
                        background-color: #0056b3;
                    }
</style>

<div class="school-list">
    <h1><i class="fas fa-trophy"></i> CUỘC THI</h1>

    <div class="timKiem">
        <form id="searchForm" asp-area="" asp-controller="CuocThis" asp-action="Index" method="get">
            <p>
                Ngày bắt đầu: <input style="background-color: #e1dcc5;" type="date" id="start_date" name="start_date" />
                Ngày kết thúc: <input style="background-color: #e1dcc5;" type="date" id="end_date" name="end_date" />
                Địa điểm: <input style="background-color: #e1dcc5;" type="text" id="diaDiem" name="diaDiem" placeholder="Nhập địa điểm thi" />
                Bài thi:
                <select style="background-color: #e1dcc5;" id="monthiId" name="monthiId">
                    <option value="">Chọn bài thi</option>
                    @foreach (var monThi in context.tbMonThi)
                    {
                        <option value="@monThi.Id">@monThi.TenMonThi</option>
                    }
                </select>

                <input type="submit" value="Tìm kiếm" class="ip-timkiem" />
            </p>
        </form>
    </div>

    <table id="cuocThiTable" class="table">
        <thead>
            <tr>
                <th>Tên cuộc thi</th>
                <th>Thời gian thi</th>
                <th>Số lượng</th>
                <th>Địa điểm</th>
                <th>Bài thi</th>
                <th>Cấp học</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                var result = from c in context.tbPhieuDangKy
                             where item.Id == c.CuocThiId
                             select c;
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.TenCuocThi)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.NgayThi)
                    </td>
                    <td>
                        @result.Count().ToString()/@Html.DisplayFor(modelItem => item.SoLuongThiSinh)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DiaDiem)
                    </td>
                    <td>
                        @{
                            var tenMonThi = context.tbMonThi.FirstOrDefault(p => p.Id == item.MonThiId);
                        }
                        @tenMonThi.TenMonThi.ToString()
                    </td>
                    <td>
                        @LayTenLoaiTruong(item.LoaiTruongId)
                    </td>
                    <td>
                        <a class="edit-link btn btn-primary" asp-area="" asp-controller="CuocThis" asp-action="Details" asp-route-Id="@item.Id">Xem chi tiết</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>



<script>
    document.addEventListener('DOMContentLoaded', function () {
        var startDateInput = document.getElementById('start_date');
        var endDateInput = document.getElementById('end_date');

        startDateInput.addEventListener('change', function () {
            endDateInput.value = startDateInput.value;
        });
    });
</script>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <!-- Trong phần head của view hoặc layout -->
    <script>
        // Hàm hiển thị thông báo với thời gian tự đóng
        function showSuccessMessage() {
            Swal.fire({
                icon: 'success',
                title: '@TempData["SuccessMessage"]',
                showConfirmButton: false,
                timer: 1500,
                onClose: function () {
                    // Sau khi thông báo tự đóng, chuyển hướng đến trang Index
                    window.location.href = '@Url.Action("Index", "CuocThis")';
                }
            });
        }

        // Hàm hiển thị thông báo lỗi với thời gian tự đóng
        function showErrorMessage() {
            Swal.fire({
                icon: 'error',
                title: '@TempData["ErrorMessage"]',
                showConfirmButton: false,
                timer: 1500
            });
        }

        // Gọi hàm hiển thị thông báo khi SuccessMessage hoặc ErrorMessage có giá trị
        @if (TempData["SuccessMessage"] != null)
        {
            <text>
                showSuccessMessage();
            </text>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <text>
                showErrorMessage();
            </text>
        }
    </script>
}